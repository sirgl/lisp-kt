// This is autogenerated file. Not intended for manual editing
package lir

class InstructionAdd(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructAdd(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 32) or firstOperand.toLong()
  val v3: Long = (v2 shr 16) or secondOperand.toLong()
  val v4: Long = v3 shl 0
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.asAdd(block: InstructionAdd.()->T): T {
  return InstructionAdd(this.storage).block()
}

class InstructionSub(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructSub(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 32) or firstOperand.toLong()
  val v3: Long = (v2 shr 16) or secondOperand.toLong()
  val v4: Long = v3 shl 0
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.asSub(block: InstructionSub.()->T): T {
  return InstructionSub(this.storage).block()
}

class InstructionMul(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructMul(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 32) or firstOperand.toLong()
  val v3: Long = (v2 shr 16) or secondOperand.toLong()
  val v4: Long = v3 shl 0
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.asMul(block: InstructionMul.()->T): T {
  return InstructionMul(this.storage).block()
}

class InstructionDiv(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructDiv(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 32) or firstOperand.toLong()
  val v3: Long = (v2 shr 16) or secondOperand.toLong()
  val v4: Long = v3 shl 0
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.asDiv(block: InstructionDiv.()->T): T {
  return InstructionDiv(this.storage).block()
}

class InstructionRem(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructRem(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 32) or firstOperand.toLong()
  val v3: Long = (v2 shr 16) or secondOperand.toLong()
  val v4: Long = v3 shl 0
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.asRem(block: InstructionRem.()->T): T {
  return InstructionRem(this.storage).block()
}

class InstructionInv(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val operand: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructInv(opcode: Byte, operand: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 48) or operand.toLong()
  val v3: Long = v2 shl 0
  return BBInstruction(v3)
}

inline fun <T> BBInstruction.asInv(block: InstructionInv.()->T): T {
  return InstructionInv(this.storage).block()
}

class InstructionIconstInplaceI32(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val inlineValue: Int
    get() {
      return (storage shr 0).toInt()
    }
}

fun constructIconstInplaceI32(opcode: Byte, inlineValue: Int): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 32) or inlineValue.toLong()
  val v3: Long = v2 shl 0
  return BBInstruction(v3)
}

inline fun <T> BBInstruction.asIconstInplaceI32(block: InstructionIconstInplaceI32.()->T): T {
  return InstructionIconstInplaceI32(this.storage).block()
}

class InstructionBitcast(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }
}

fun constructBitcast(opcode: Byte): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = v1 shl 56
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.asBitcast(block: InstructionBitcast.()->T): T {
  return InstructionBitcast(this.storage).block()
}

class InstructionCall(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val argsHolded: Byte
    get() {
      return (storage shr 48).toByte()
    }

  val functionIndex: Short
    get() {
      return (storage shr 32).toShort()
    }

  val firstArg: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondArg: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructCall(opcode: Byte, argsHolded: Byte, functionIndex: Short, firstArg: Short, secondArg: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 8) or argsHolded.toLong()
  val v3: Long = (v2 shr 8) or functionIndex.toLong()
  val v4: Long = (v3 shr 16) or firstArg.toLong()
  val v5: Long = (v4 shr 16) or secondArg.toLong()
  val v6: Long = v5 shl 0
  return BBInstruction(v6)
}

inline fun <T> BBInstruction.asCall(block: InstructionCall.()->T): T {
  return InstructionCall(this.storage).block()
}

class InstructionCallByPtr(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val argsHolded: Byte
    get() {
      return (storage shr 48).toByte()
    }

  val ptrOperand: Short
    get() {
      return (storage shr 32).toShort()
    }

  val firstArg: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondArg: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructCallByPtr(opcode: Byte, argsHolded: Byte, ptrOperand: Short, firstArg: Short, secondArg: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 8) or argsHolded.toLong()
  val v3: Long = (v2 shr 8) or ptrOperand.toLong()
  val v4: Long = (v3 shr 16) or firstArg.toLong()
  val v5: Long = (v4 shr 16) or secondArg.toLong()
  val v6: Long = v5 shl 0
  return BBInstruction(v6)
}

inline fun <T> BBInstruction.asCallByPtr(block: InstructionCallByPtr.()->T): T {
  return InstructionCallByPtr(this.storage).block()
}

class InstructionArgs(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val argsHolded: Byte
    get() {
      return (storage shr 48).toByte()
    }

  val firstArg: Short
    get() {
      return (storage shr 32).toShort()
    }

  val secondArg: Short
    get() {
      return (storage shr 16).toShort()
    }

  val thirdArg: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructArgs(opcode: Byte, argsHolded: Byte, firstArg: Short, secondArg: Short, thirdArg: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 8) or argsHolded.toLong()
  val v3: Long = (v2 shr 8) or firstArg.toLong()
  val v4: Long = (v3 shr 16) or secondArg.toLong()
  val v5: Long = (v4 shr 16) or thirdArg.toLong()
  val v6: Long = v5 shl 0
  return BBInstruction(v6)
}

inline fun <T> BBInstruction.asArgs(block: InstructionArgs.()->T): T {
  return InstructionArgs(this.storage).block()
}

class InstructionFunctionPtr(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val functionIndex: Short
    get() {
      return (storage shr 32).toShort()
    }
}

fun constructFunctionPtr(opcode: Byte, functionIndex: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 16) or functionIndex.toLong()
  val v3: Long = v2 shl 32
  return BBInstruction(v3)
}

inline fun <T> BBInstruction.asFunctionPtr(block: InstructionFunctionPtr.()->T): T {
  return InstructionFunctionPtr(this.storage).block()
}

class InstructionLoad(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val startPtr: Short
    get() {
      return (storage shr 32).toShort()
    }

  val value: Short
    get() {
      return (storage shr 16).toShort()
    }

  val typeIndex: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructLoad(opcode: Byte, startPtr: Short, value: Short, typeIndex: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 16) or startPtr.toLong()
  val v3: Long = (v2 shr 16) or value.toLong()
  val v4: Long = (v3 shr 16) or typeIndex.toLong()
  val v5: Long = v4 shl 0
  return BBInstruction(v5)
}

inline fun <T> BBInstruction.asLoad(block: InstructionLoad.()->T): T {
  return InstructionLoad(this.storage).block()
}

class InstructionStore(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val startPtr: Short
    get() {
      return (storage shr 32).toShort()
    }

  val value: Short
    get() {
      return (storage shr 16).toShort()
    }

  val typeIndex: Short
    get() {
      return (storage shr 0).toShort()
    }
}

fun constructStore(opcode: Byte, startPtr: Short, value: Short, typeIndex: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 16) or startPtr.toLong()
  val v3: Long = (v2 shr 16) or value.toLong()
  val v4: Long = (v3 shr 16) or typeIndex.toLong()
  val v5: Long = v4 shl 0
  return BBInstruction(v5)
}

inline fun <T> BBInstruction.asStore(block: InstructionStore.()->T): T {
  return InstructionStore(this.storage).block()
}

class InstructionAlloca(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }
}

fun constructAlloca(opcode: Byte): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = v1 shl 56
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.asAlloca(block: InstructionAlloca.()->T): T {
  return InstructionAlloca(this.storage).block()
}

class InstructionGetElementPtr(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val elementVar: Short
    get() {
      return (storage shr 32).toShort()
    }
}

fun constructGetElementPtr(opcode: Byte, elementVar: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 16) or elementVar.toLong()
  val v3: Long = v2 shl 32
  return BBInstruction(v3)
}

inline fun <T> BBInstruction.asGetElementPtr(block: InstructionGetElementPtr.()->T): T {
  return InstructionGetElementPtr(this.storage).block()
}

class InstructionIconstI64(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val globalVarIndex: Short
    get() {
      return (storage shr 32).toShort()
    }
}

fun constructIconstI64(opcode: Byte, globalVarIndex: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 16) or globalVarIndex.toLong()
  val v3: Long = v2 shl 32
  return BBInstruction(v3)
}

inline fun <T> BBInstruction.asIconstI64(block: InstructionIconstI64.()->T): T {
  return InstructionIconstI64(this.storage).block()
}

class InstructionGetElementPtrVar(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val globalVarIndex: Short
    get() {
      return (storage shr 32).toShort()
    }
}

fun constructGetElementPtrVar(opcode: Byte, globalVarIndex: Short): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = (v1 shr 16) or globalVarIndex.toLong()
  val v3: Long = v2 shl 32
  return BBInstruction(v3)
}

inline fun <T> BBInstruction.asGetElementPtrVar(block: InstructionGetElementPtrVar.()->T): T {
  return InstructionGetElementPtrVar(this.storage).block()
}

class InstructionNoop(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }
}

fun constructNoop(opcode: Byte): BBInstruction {
  val v0: Long = 0
  val v1: Long = (v0 shr 0) or opcode.toLong()
  val v2: Long = v1 shl 56
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.asNoop(block: InstructionNoop.()->T): T {
  return InstructionNoop(this.storage).block()
}
