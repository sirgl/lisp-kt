// This is autogenerated file. Not intended for manual editing
package lir

inline class InstructionNoop(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  override fun toString(): String {
    return "noop "
  }

}

fun constructNoop(): BBInstruction {
  val v0: Long = Instructions.NOOP.toLong()
  val v1: Long = v0 shl 56
  return BBInstruction(v1)
}

inline fun <T> BBInstruction.withNoop(block: InstructionNoop.()->T): T {
  return InstructionNoop(this.storage).block()
}

inline fun BBInstruction.asNoop(): InstructionNoop {
  return InstructionNoop(this.storage)
}

inline class InstructionAdd(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "add firstOperand=%$firstOperand, secondOperand=%$secondOperand"
  }

}

fun constructAdd(firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = Instructions.ADD.toLong()
  val v1: Long = (v0 shl 40) or firstOperand.toLong()
  val v2: Long = (v1 shl 16) or secondOperand.toLong()
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withAdd(block: InstructionAdd.()->T): T {
  return InstructionAdd(this.storage).block()
}

inline fun BBInstruction.asAdd(): InstructionAdd {
  return InstructionAdd(this.storage)
}

inline class InstructionSub(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "sub firstOperand=%$firstOperand, secondOperand=%$secondOperand"
  }

}

fun constructSub(firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = Instructions.SUB.toLong()
  val v1: Long = (v0 shl 40) or firstOperand.toLong()
  val v2: Long = (v1 shl 16) or secondOperand.toLong()
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withSub(block: InstructionSub.()->T): T {
  return InstructionSub(this.storage).block()
}

inline fun BBInstruction.asSub(): InstructionSub {
  return InstructionSub(this.storage)
}

inline class InstructionMul(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "mul firstOperand=%$firstOperand, secondOperand=%$secondOperand"
  }

}

fun constructMul(firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = Instructions.MUL.toLong()
  val v1: Long = (v0 shl 40) or firstOperand.toLong()
  val v2: Long = (v1 shl 16) or secondOperand.toLong()
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withMul(block: InstructionMul.()->T): T {
  return InstructionMul(this.storage).block()
}

inline fun BBInstruction.asMul(): InstructionMul {
  return InstructionMul(this.storage)
}

inline class InstructionDiv(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "div firstOperand=%$firstOperand, secondOperand=%$secondOperand"
  }

}

fun constructDiv(firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = Instructions.DIV.toLong()
  val v1: Long = (v0 shl 40) or firstOperand.toLong()
  val v2: Long = (v1 shl 16) or secondOperand.toLong()
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withDiv(block: InstructionDiv.()->T): T {
  return InstructionDiv(this.storage).block()
}

inline fun BBInstruction.asDiv(): InstructionDiv {
  return InstructionDiv(this.storage)
}

inline class InstructionRem(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val firstOperand: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondOperand: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "rem firstOperand=%$firstOperand, secondOperand=%$secondOperand"
  }

}

fun constructRem(firstOperand: Short, secondOperand: Short): BBInstruction {
  val v0: Long = Instructions.REM.toLong()
  val v1: Long = (v0 shl 40) or firstOperand.toLong()
  val v2: Long = (v1 shl 16) or secondOperand.toLong()
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withRem(block: InstructionRem.()->T): T {
  return InstructionRem(this.storage).block()
}

inline fun BBInstruction.asRem(): InstructionRem {
  return InstructionRem(this.storage)
}

inline class InstructionInv(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val operand: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "inv operand=%$operand"
  }

}

fun constructInv(operand: Short): BBInstruction {
  val v0: Long = Instructions.INV.toLong()
  val v1: Long = (v0 shl 56) or operand.toLong()
  return BBInstruction(v1)
}

inline fun <T> BBInstruction.withInv(block: InstructionInv.()->T): T {
  return InstructionInv(this.storage).block()
}

inline fun BBInstruction.asInv(): InstructionInv {
  return InstructionInv(this.storage)
}

inline class InstructionIconstInplaceI32(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val inlineValue: Int
    get() {
      return (storage shr 0).toInt()
    }

  override fun toString(): String {
    return "iconst_inplace_i32 inlineValue=$inlineValue"
  }

}

fun constructIconstInplaceI32(inlineValue: Int): BBInstruction {
  val v0: Long = Instructions.ICONST_INPLACE_I32.toLong()
  val v1: Long = (v0 shl 56) or inlineValue.toLong()
  return BBInstruction(v1)
}

inline fun <T> BBInstruction.withIconstInplaceI32(block: InstructionIconstInplaceI32.()->T): T {
  return InstructionIconstInplaceI32(this.storage).block()
}

inline fun BBInstruction.asIconstInplaceI32(): InstructionIconstInplaceI32 {
  return InstructionIconstInplaceI32(this.storage)
}

inline class InstructionBitcast(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  override fun toString(): String {
    return "bitcast "
  }

}

fun constructBitcast(): BBInstruction {
  val v0: Long = Instructions.BITCAST.toLong()
  val v1: Long = v0 shl 56
  return BBInstruction(v1)
}

inline fun <T> BBInstruction.withBitcast(block: InstructionBitcast.()->T): T {
  return InstructionBitcast(this.storage).block()
}

inline fun BBInstruction.asBitcast(): InstructionBitcast {
  return InstructionBitcast(this.storage)
}

inline class InstructionCall(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val argsHolded: Byte
    get() {
      return (storage shr 48).toByte()
    }

  val functionIndex: Short
    get() {
      return (storage shr 32).toShort()
    }

  val firstArg: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondArg: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "call argsHolded=$argsHolded, functionIndex=$functionIndex, firstArg=%$firstArg, secondArg=%$secondArg"
  }

}

fun constructCall(argsHolded: Byte, functionIndex: Short, firstArg: Short, secondArg: Short): BBInstruction {
  val v0: Long = Instructions.CALL.toLong()
  val v1: Long = (v0 shl 8) or argsHolded.toLong()
  val v2: Long = (v1 shl 16) or functionIndex.toLong()
  val v3: Long = (v2 shl 16) or firstArg.toLong()
  val v4: Long = (v3 shl 16) or secondArg.toLong()
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.withCall(block: InstructionCall.()->T): T {
  return InstructionCall(this.storage).block()
}

inline fun BBInstruction.asCall(): InstructionCall {
  return InstructionCall(this.storage)
}

inline class InstructionCallByPtr(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val argsHolded: Byte
    get() {
      return (storage shr 48).toByte()
    }

  val ptrOperand: Short
    get() {
      return (storage shr 32).toShort()
    }

  val firstArg: Short
    get() {
      return (storage shr 16).toShort()
    }

  val secondArg: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "call_by_ptr argsHolded=$argsHolded, ptrOperand=%$ptrOperand, firstArg=%$firstArg, secondArg=%$secondArg"
  }

}

fun constructCallByPtr(argsHolded: Byte, ptrOperand: Short, firstArg: Short, secondArg: Short): BBInstruction {
  val v0: Long = Instructions.CALL_BY_PTR.toLong()
  val v1: Long = (v0 shl 8) or argsHolded.toLong()
  val v2: Long = (v1 shl 16) or ptrOperand.toLong()
  val v3: Long = (v2 shl 16) or firstArg.toLong()
  val v4: Long = (v3 shl 16) or secondArg.toLong()
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.withCallByPtr(block: InstructionCallByPtr.()->T): T {
  return InstructionCallByPtr(this.storage).block()
}

inline fun BBInstruction.asCallByPtr(): InstructionCallByPtr {
  return InstructionCallByPtr(this.storage)
}

inline class InstructionArgs(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val argsHolded: Byte
    get() {
      return (storage shr 48).toByte()
    }

  val firstArg: Short
    get() {
      return (storage shr 32).toShort()
    }

  val secondArg: Short
    get() {
      return (storage shr 16).toShort()
    }

  val thirdArg: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "args argsHolded=$argsHolded, firstArg=%$firstArg, secondArg=%$secondArg, thirdArg=%$thirdArg"
  }

}

fun constructArgs(argsHolded: Byte, firstArg: Short, secondArg: Short, thirdArg: Short): BBInstruction {
  val v0: Long = Instructions.ARGS.toLong()
  val v1: Long = (v0 shl 8) or argsHolded.toLong()
  val v2: Long = (v1 shl 16) or firstArg.toLong()
  val v3: Long = (v2 shl 16) or secondArg.toLong()
  val v4: Long = (v3 shl 16) or thirdArg.toLong()
  return BBInstruction(v4)
}

inline fun <T> BBInstruction.withArgs(block: InstructionArgs.()->T): T {
  return InstructionArgs(this.storage).block()
}

inline fun BBInstruction.asArgs(): InstructionArgs {
  return InstructionArgs(this.storage)
}

inline class InstructionFunctionPtr(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val functionIndex: Short
    get() {
      return (storage shr 32).toShort()
    }

  override fun toString(): String {
    return "function_ptr functionIndex=$functionIndex"
  }

}

fun constructFunctionPtr(functionIndex: Short): BBInstruction {
  val v0: Long = Instructions.FUNCTION_PTR.toLong()
  val v1: Long = (v0 shl 24) or functionIndex.toLong()
  val v2: Long = v1 shl 32
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withFunctionPtr(block: InstructionFunctionPtr.()->T): T {
  return InstructionFunctionPtr(this.storage).block()
}

inline fun BBInstruction.asFunctionPtr(): InstructionFunctionPtr {
  return InstructionFunctionPtr(this.storage)
}

inline class InstructionLoad(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val startPtr: Short
    get() {
      return (storage shr 32).toShort()
    }

  override fun toString(): String {
    return "load startPtr=%$startPtr"
  }

}

fun constructLoad(startPtr: Short): BBInstruction {
  val v0: Long = Instructions.LOAD.toLong()
  val v1: Long = (v0 shl 24) or startPtr.toLong()
  val v2: Long = v1 shl 32
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withLoad(block: InstructionLoad.()->T): T {
  return InstructionLoad(this.storage).block()
}

inline fun BBInstruction.asLoad(): InstructionLoad {
  return InstructionLoad(this.storage)
}

inline class InstructionStore(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val startPtr: Short
    get() {
      return (storage shr 32).toShort()
    }

  val value: Short
    get() {
      return (storage shr 16).toShort()
    }

  val typeIndex: Short
    get() {
      return (storage shr 0).toShort()
    }

  override fun toString(): String {
    return "store startPtr=%$startPtr, value=%$value, typeIndex=$typeIndex"
  }

}

fun constructStore(startPtr: Short, value: Short, typeIndex: Short): BBInstruction {
  val v0: Long = Instructions.STORE.toLong()
  val v1: Long = (v0 shl 24) or startPtr.toLong()
  val v2: Long = (v1 shl 16) or value.toLong()
  val v3: Long = (v2 shl 16) or typeIndex.toLong()
  return BBInstruction(v3)
}

inline fun <T> BBInstruction.withStore(block: InstructionStore.()->T): T {
  return InstructionStore(this.storage).block()
}

inline fun BBInstruction.asStore(): InstructionStore {
  return InstructionStore(this.storage)
}

inline class InstructionAlloca(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  override fun toString(): String {
    return "alloca "
  }

}

fun constructAlloca(): BBInstruction {
  val v0: Long = Instructions.ALLOCA.toLong()
  val v1: Long = v0 shl 56
  return BBInstruction(v1)
}

inline fun <T> BBInstruction.withAlloca(block: InstructionAlloca.()->T): T {
  return InstructionAlloca(this.storage).block()
}

inline fun BBInstruction.asAlloca(): InstructionAlloca {
  return InstructionAlloca(this.storage)
}

inline class InstructionGetElementPtr(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val elementVar: Short
    get() {
      return (storage shr 32).toShort()
    }

  override fun toString(): String {
    return "get_element_ptr elementVar=%$elementVar"
  }

}

fun constructGetElementPtr(elementVar: Short): BBInstruction {
  val v0: Long = Instructions.GET_ELEMENT_PTR.toLong()
  val v1: Long = (v0 shl 24) or elementVar.toLong()
  val v2: Long = v1 shl 32
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withGetElementPtr(block: InstructionGetElementPtr.()->T): T {
  return InstructionGetElementPtr(this.storage).block()
}

inline fun BBInstruction.asGetElementPtr(): InstructionGetElementPtr {
  return InstructionGetElementPtr(this.storage)
}

inline class InstructionIconstI64(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val globalVarIndex: Short
    get() {
      return (storage shr 32).toShort()
    }

  override fun toString(): String {
    return "iconst_i64 globalVarIndex=$globalVarIndex"
  }

}

fun constructIconstI64(globalVarIndex: Short): BBInstruction {
  val v0: Long = Instructions.ICONST_I64.toLong()
  val v1: Long = (v0 shl 24) or globalVarIndex.toLong()
  val v2: Long = v1 shl 32
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withIconstI64(block: InstructionIconstI64.()->T): T {
  return InstructionIconstI64(this.storage).block()
}

inline fun BBInstruction.asIconstI64(): InstructionIconstI64 {
  return InstructionIconstI64(this.storage)
}

inline class InstructionGetElementPtrVar(val storage: Long) {
  val opcode: Byte
    get() {
      return (storage shr 56).toByte()
    }

  val globalVarIndex: Short
    get() {
      return (storage shr 32).toShort()
    }

  override fun toString(): String {
    return "get_element_ptr_var globalVarIndex=$globalVarIndex"
  }

}

fun constructGetElementPtrVar(globalVarIndex: Short): BBInstruction {
  val v0: Long = Instructions.GET_ELEMENT_PTR_VAR.toLong()
  val v1: Long = (v0 shl 24) or globalVarIndex.toLong()
  val v2: Long = v1 shl 32
  return BBInstruction(v2)
}

inline fun <T> BBInstruction.withGetElementPtrVar(block: InstructionGetElementPtrVar.()->T): T {
  return InstructionGetElementPtrVar(this.storage).block()
}

inline fun BBInstruction.asGetElementPtrVar(): InstructionGetElementPtrVar {
  return InstructionGetElementPtrVar(this.storage)
}

object Instructions {
  val NOOP: Byte = 0
  val ADD: Byte = 1
  val SUB: Byte = 2
  val MUL: Byte = 3
  val DIV: Byte = 4
  val REM: Byte = 5
  val INV: Byte = 6
  val ICONST_INPLACE_I32: Byte = 7
  val BITCAST: Byte = 8
  val CALL: Byte = 9
  val CALL_BY_PTR: Byte = 10
  val ARGS: Byte = 11
  val FUNCTION_PTR: Byte = 12
  val LOAD: Byte = 13
  val STORE: Byte = 14
  val ALLOCA: Byte = 15
  val GET_ELEMENT_PTR: Byte = 16
  val ICONST_I64: Byte = 17
  val GET_ELEMENT_PTR_VAR: Byte = 18
  val toStrings = arrayOf<(BBInstruction)->String>(
    { it.asNoop().toString() },
    { it.asAdd().toString() },
    { it.asSub().toString() },
    { it.asMul().toString() },
    { it.asDiv().toString() },
    { it.asRem().toString() },
    { it.asInv().toString() },
    { it.asIconstInplaceI32().toString() },
    { it.asBitcast().toString() },
    { it.asCall().toString() },
    { it.asCallByPtr().toString() },
    { it.asArgs().toString() },
    { it.asFunctionPtr().toString() },
    { it.asLoad().toString() },
    { it.asStore().toString() },
    { it.asAlloca().toString() },
    { it.asGetElementPtr().toString() },
    { it.asIconstI64().toString() },
    { it.asGetElementPtrVar().toString() }
  )
}
