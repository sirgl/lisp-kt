// This is autogenerated file. Not intended for manual editing
package lir

class InstructionAdd(val storage: Long) {
    val opcode: Byte
        get() {
            return (storage shr 56).toByte()
        }

    val firstOperand: Short
        get() {
            return (storage shr 16).toShort()
        }

    val secondOperand: Short
        get() {
            return (storage shr 0).toShort()
        }
}

fun constructInstructionAdd(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
    val v0: Long = 0
    val v1: Long = (v0 shr 0) or opcode.toLong()
    val v2: Long = (v1 shr 32) or firstOperand.toLong()
    val v3: Long = (v2 shr 16) or secondOperand.toLong()
    return BBInstruction(v3)
}

inline fun <T> BBInstruction.asAdd(block: InstructionAdd.()->T): T {
    return InstructionAdd(this.storage).block()
}

class InstructionSub(val storage: Long) {
    val opcode: Byte
        get() {
            return (storage shr 56).toByte()
        }

    val firstOperand: Short
        get() {
            return (storage shr 16).toShort()
        }

    val secondOperand: Short
        get() {
            return (storage shr 0).toShort()
        }
}

fun constructInstructionSub(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
    val v0: Long = 0
    val v1: Long = (v0 shr 0) or opcode.toLong()
    val v2: Long = (v1 shr 32) or firstOperand.toLong()
    val v3: Long = (v2 shr 16) or secondOperand.toLong()
    return BBInstruction(v3)
}

inline fun <T> BBInstruction.asSub(block: InstructionSub.()->T): T {
    return InstructionSub(this.storage).block()
}

class InstructionMul(val storage: Long) {
    val opcode: Byte
        get() {
            return (storage shr 56).toByte()
        }

    val firstOperand: Short
        get() {
            return (storage shr 16).toShort()
        }

    val secondOperand: Short
        get() {
            return (storage shr 0).toShort()
        }
}

fun constructInstructionMul(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
    val v0: Long = 0
    val v1: Long = (v0 shr 0) or opcode.toLong()
    val v2: Long = (v1 shr 32) or firstOperand.toLong()
    val v3: Long = (v2 shr 16) or secondOperand.toLong()
    return BBInstruction(v3)
}

inline fun <T> BBInstruction.asMul(block: InstructionMul.()->T): T {
    return InstructionMul(this.storage).block()
}

class InstructionDiv(val storage: Long) {
    val opcode: Byte
        get() {
            return (storage shr 56).toByte()
        }

    val firstOperand: Short
        get() {
            return (storage shr 16).toShort()
        }

    val secondOperand: Short
        get() {
            return (storage shr 0).toShort()
        }
}

fun constructInstructionDiv(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
    val v0: Long = 0
    val v1: Long = (v0 shr 0) or opcode.toLong()
    val v2: Long = (v1 shr 32) or firstOperand.toLong()
    val v3: Long = (v2 shr 16) or secondOperand.toLong()
    return BBInstruction(v3)
}

inline fun <T> BBInstruction.asDiv(block: InstructionDiv.()->T): T {
    return InstructionDiv(this.storage).block()
}

class InstructionRem(val storage: Long) {
    val opcode: Byte
        get() {
            return (storage shr 56).toByte()
        }

    val firstOperand: Short
        get() {
            return (storage shr 16).toShort()
        }

    val secondOperand: Short
        get() {
            return (storage shr 0).toShort()
        }
}

fun constructInstructionRem(opcode: Byte, firstOperand: Short, secondOperand: Short): BBInstruction {
    val v0: Long = 0
    val v1: Long = (v0 shr 0) or opcode.toLong()
    val v2: Long = (v1 shr 32) or firstOperand.toLong()
    val v3: Long = (v2 shr 16) or secondOperand.toLong()
    return BBInstruction(v3)
}

inline fun <T> BBInstruction.asRem(block: InstructionRem.()->T): T {
    return InstructionRem(this.storage).block()
}

class InstructionInv(val storage: Long) {
    val opcode: Byte
        get() {
            return (storage shr 56).toByte()
        }

    val operand: Short
        get() {
            return (storage shr 0).toShort()
        }
}

fun constructInstructionInv(opcode: Byte, operand: Short): BBInstruction {
    val v0: Long = 0
    val v1: Long = (v0 shr 0) or opcode.toLong()
    val v2: Long = (v1 shr 48) or operand.toLong()
    return BBInstruction(v2)
}

inline fun <T> BBInstruction.asInv(block: InstructionInv.()->T): T {
    return InstructionInv(this.storage).block()
}